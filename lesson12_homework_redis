"""Custom Module for Redis testing"""
import uuid
import datetime
import redis


class ConnectRedis:
    """
    A class to manage user sessions using Redis for storage.

    Attributes:
        r (redis.Redis): A Redis connection object.
    """

    def __init__(self) -> None:
        """
        Initializes the ConnectRedis class by connecting to the Redis server.
        """
        self.r = redis.Redis(host="localhost", port=6379, db=0)

    def add_session(self, user_id: int) -> str:
        """
        Adds a new session for the user.

        Args:
            user_id (int): The unique identifier of the user.

        Returns:
            str: The session token generated for the user.
        """
        session_token = str(uuid.uuid4())
        session_key = f"session:{session_token}"
        self.r.hset(session_key, "user_id", user_id)
        self.r.hset(session_key, "session_token", session_token)
        self.r.hset(session_key, "login_time", datetime.datetime.now(datetime.UTC).isoformat())
        self.r.set(f"user_id:{user_id}", session_key)
        return session_token

    def get_session(self, user_id: int) -> str | None:
        """
        Retrieves the session token for the user.

        Args:
            user_id (int): The unique identifier of the user.

        Returns:
            str | None: The session token if it exists, otherwise None.
        """
        session_key = self.r.get(f"user_id:{str(user_id)}")
        if session_key:
            res = self.r.hget(session_key, "session_token")
            return res.decode("utf-8") if res else None
        return None

    def update_session(self, user_id: int) -> None:
        """
        Updates the login time for the user's session.

        Args:
            user_id (int): The unique identifier of the user.
        """
        session_key = self.r.get(f"user_id:{str(user_id)}")
        if session_key:
            self.r.hset(session_key, "login_time", datetime.datetime.now(datetime.UTC).isoformat())

    def delete_session(self, user_id: int) -> None:
        """
        Deletes the session for the user.

        Args:
            user_id (int): The unique identifier of the user.
        """
        session_key = self.r.get(f"user_id:{str(user_id)}")
        if session_key:
            self.r.delete(session_key)

    def set_ttl(self, user_id: int, expiration: int) -> None:
        """
        Sets the time-to-live (TTL) for the user's session.

        Args:
            user_id (int): The unique identifier of the user.
            expiration (int): The expiration time in seconds.
        """
        session_key = self.r.get(f"user_id:{str(user_id)}")
        if session_key:
            self.r.expire(session_key, expiration)


red = ConnectRedis()
red.add_session(2)
print(red.get_session())
red.update_session(2)
red.delete_session(2)
red.set_ttl(1, 1800)
