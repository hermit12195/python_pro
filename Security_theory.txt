1. Дайте визначення наступним термінам: XSS, SQL injection, CSRF, clickjacking, параметризовані запити, middleware, salt, hashing.
XSS (Cross-Site Scripting) — це тип вразливості в веб-додатках, коли зловмисник вставляє шкідливий скрипт у веб-сторінку, яку відвідує користувач. 
Це дозволяє зловмиснику викрасти сесійні дані або виконати небажані дії від імені користувача.

SQL Injection — це вразливість, коли зловмисник вставляє шкідливий SQL-код у запит до бази даних, що може дозволити йому отримати, змінити або видалити 
дані в базі, а також отримати доступ до системи.

CSRF (Cross-Site Request Forgery) — це атака, при якій зловмисник змушує користувача виконати небажану дію на веб-сайті, де користувач уже аутентифікований, 
наприклад, через підроблений запит, відправлений з іншого сайту.

Clickjacking — це атака, при якій зловмисник приховує шкідливу сторінку або елементи вікна, так що користувач насправді натискає на елемент, який не бачить, 
наприклад, кнопку або посилання, що виконує небажану дію.

Параметризовані запити — це спосіб роботи з базою даних, коли значення змінних в SQL-запитах передаються через параметри замість того, щоб безпосередньо 
вбудовувати їх у запит. Це допомагає запобігти SQL injection, оскільки зловмисник не може змінити структуру запиту.

Middleware — це програмний компонент, який обробляє запити між клієнтом і сервером, виконуючи додаткові функції, такі як автентифікація, логування, обробка помилок, 
перевірка прав доступу тощо. Middleware зазвичай використовується в веб-фреймворках.

Salt — це випадкове значення, яке додається до пароля перед його хешуванням. Це запобігає використанню попередньо обчислених таблиць хешів (rainbow tables) для атаки 
на паролі, оскільки кожен пароль має свій унікальний salt.

Hashing — це процес перетворення вхідних даних (наприклад, пароля) у фіксовану довжину рядка, який називається хешем. Хешування є однонаправленим процесом, 
о означає, що з хешу неможливо відновити початкові дані. Це використовується для зберігання паролів і перевірки їх на відповідність.

2. Опишіть основні вразливості, до яких може бути схильний додаток на Django, та способи їх запобігання.
SQL Injection
Уразливість: Виникає, коли дані з користувацького вводу безпосередньо вставляються у SQL-запити. Це дозволяє зловмиснику змінювати запит та виконувати довільні SQL-команди.
Запобігання:

    Використання ORM Django, який автоматично застосовує параметризовані запити:

    User.objects.filter(username=username)  # БЕЗПЕЧНО

    Уникнення ручного написання SQL-запитів через raw() та execute() без параметризації.

Cross-Site Scripting (XSS)
Уразливість: Вставка шкідливого JavaScript-коду у веб-сторінку через форми, URL або інші вхідні дані.
Запобігання:

    Використання автоматичного екранування у шаблонах Django:

    <p>{{ user_input }}</p>  <!-- БЕЗПЕЧНО, бо Django автоматично екранує вміст -->

    Якщо потрібно вставити HTML-код, використовувати bleach для фільтрації небезпечних тегів.

Cross-Site Request Forgery (CSRF)
Уразливість: Використання активної сесії користувача для виконання небажаних дій від його імені.
Запобігання:

    Використання CSRF-токенів, які Django автоматично додає у форми:

    <form method="post">
        {% csrf_token %}
        <input type="text" name="username">
        <input type="submit">
    </form>

    Налаштування @csrf_exempt лише для специфічних API-ендпоінтів, а краще — використовувати Django REST Framework із csrf_protect.

Clickjacking
Уразливість: Вставка сторінки у невидимий <iframe>, щоб користувач випадково натиснув на елемент, що виконує небажані дії.
Запобігання:

    Використання заголовка X-Frame-Options у Django:

    MIDDLEWARE = [
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]

    Налаштування X_FRAME_OPTIONS = 'DENY' або 'SAMEORIGIN' у settings.py.


Недостатній захист паролів
Уразливість: Збереження паролів у незахищеному вигляді або використання слабких хешів.
Запобігання:

    Використання django.contrib.auth.hashers для безпечного хешування паролів.

    Встановлення PASSWORD_HASHERS, що включає Argon2 або PBKDF2.

    Використання salt, що Django застосовує автоматично.

Несанкціонований доступ до API
Уразливість: Відкриті API-ендпоінти можуть дозволяти неавторизованим користувачам змінювати або отримувати дані.
Запобігання:

    Використання JWT або OAuth2 для API-аутентифікації.

    Обмеження доступу через @login_required або Django REST Framework (DRF) permissions:

    from rest_framework.permissions import IsAuthenticated

    class SecureView(APIView):
        permission_classes = [IsAuthenticated]



3. Як захистити конфіденційні дані користувачів у Django-додатку? Які механізми шифрування можна використовувати?
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
]

4. Які способи аутентифікації та авторизації користувачів передбачені в Django? Опишіть їх переваги та недоліки.
Аутентифікація через сесії (session-based)
Аутентифікація через токени (Token-based)
JWT (JSON Web Token)
OAuth 2.0 / OpenID Connect

5. Як забезпечити безпеку сесій користувачів? Які загрози можуть виникнути і як їх уникнути?
SESSION_COOKIE_SECURE = True  Захищає від: Перехоплення cookie через HTTP
SESSION_COOKIE_HTTPONLY = True  Захищає від: XSS
SESSION_COOKIE_AGE = 1800  Захищає від: Використання старих сесій після відходу користувача
request.session.flush() Захищає від: Викрадення неочищених сесій
CSRF_COOKIE_SECURE = True  CSRF_COOKIE_HTTPONLY = True  Захищає від: CSRF
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  Захищає від: Використання чужих сесій після закриття браузера

6. Які заходи можна вжити для захисту Django-додатка від DDoS атак?
Використання Rate Limiting (Обмеження запитів)
Налаштування WAF (Web Application Firewall)
Використання Google reCAPTCHA

7. Як захистити форми від підробки міжсайтових запитів (CSRF)?
Вбудований CSRF-захист у Django Middleware
Додавання CSRF-токена у шаблонах (HTML-форми)
CSRF_COOKIE_SECURE = True          # Використовувати тільки через HTTPS
CSRF_COOKIE_HTTPONLY = True        # Зробити cookie недоступними для JavaScript
CSRF_COOKIE_SAMESITE = 'Lax'       # Запобігає передачі cookie між різними сайтами
CSRF_USE_SESSIONS = False     # Використовувати cookie для зберігання CSRF токенів