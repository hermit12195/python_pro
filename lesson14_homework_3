"""Custom Module for testing asyncio.Queue"""
import datetime
import asyncio
import logging

logging.basicConfig(filename="app.log", level=logging.DEBUG)


async def producer(queue: asyncio.Queue) -> None:
    """
    Produces five tasks!
    :param queue: asyncio.Queue
    :return: None
    """
    if isinstance(queue, asyncio.Queue):
        try:
            for element in range(1, 6):
                await queue.put(element)
                logging.info(f"{datetime.datetime.utcnow().replace(microsecond=0)} - Produced a task '{element}'!")
                await asyncio.sleep(1)
        except asyncio.TimeoutError as e:
            logging.error(f"{datetime.datetime.utcnow().replace(microsecond=0)} - ERROR: {e.__repr__()}")

    else:
        logging.error(
            f"{datetime.datetime.utcnow().replace(microsecond=0)} - Invalid data type! Please use type asyncio.Queue for queue argument.")


async def consumer(queue):
    if isinstance(queue, asyncio.Queue):
        try:
            while not queue.empty():
                element = await queue.get()
                logging.info(
                    f"{datetime.datetime.utcnow().replace(microsecond=0)} - Consumer received a task '{element}'!")
                queue.task_done()
                await asyncio.sleep(2)
        except asyncio.TimeoutError as e:
            logging.error(f"{datetime.datetime.utcnow().replace(microsecond=0)} - ERROR: {e.__repr__()}")
    else:
        logging.error(
            f"{datetime.datetime.utcnow().replace(microsecond=0)} - Invalid data type! Please use type asyncio.Queue for queue argument.")


async def main():
    try:
        queue = asyncio.Queue()
        await asyncio.gather(
            producer(queue),
            consumer(queue)
        )
        logging.info("Application was successfully completed!")
    except asyncio.TimeoutError as e:
        logging.error(f"{datetime.datetime.utcnow().replace(microsecond=0)} - ERROR: {e.__repr__()}")


asyncio.run(main())

with open("app.log", "r") as logs:
    for line in logs.readlines():
        print(line)
