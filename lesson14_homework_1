import asyncio
import random
import time
import logging
from typing import List

logging.basicConfig(level=logging.INFO)


async def download_page(url: str) -> None:
    """
    Simulates the page downloading and provides the completion time.
    :param url: str
    :return: None
    """
    if isinstance(url, str):
        try:
            delay = [1, 2, 3, 4, 5]
            start = time.time()
            print("Downloading the URL!")
            await asyncio.sleep(random.choice(delay))
            print(f"Time for task completion: {time.time() - start:.2f} sec")
        except asyncio.TimeoutError as e:
            logging.info(f"ERROR: {e}")
    else:
        logging.info("Invalid data type! Please use type str for 'url' argument.")


async def main(urls: List[str]) -> None:
    """
    Asynchronously downloads pages from a list of URLs concurrently.
    :param urls: list
    :return: None
    """
    if isinstance(urls, list):
        try:
            tasks: list = [download_page(url) for url in urls]
            await asyncio.wait_for(asyncio.gather(*tasks), 5)
        except asyncio.TimeoutError as e:
            logging.info(f"ERROR: {e.__repr__()}")
    else:
        logging.info("Invalid data type! Please use type List[str] for 'urls' argument.")


asyncio.run(
    main(["https://www.google.com/", "https://www.google.com/", "https://www.google.com/", "https://www.google.com/"]))
