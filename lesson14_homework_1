"""Custom Module for aiohttp tests"""
import datetime
import aiohttp
import asyncio
import logging
from typing import List

logging.basicConfig(filename='app.log', level=logging.DEBUG)


async def fetch_content(url: str) -> str:
    """
    Fetches content from URL in text format.
    :param url: str
    :return:
    """
    if isinstance(url, str):
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    return await response.text()
        except (aiohttp.ClientConnectionError, aiohttp.ClientSession) as e:
            logging.error(f"{datetime.datetime.utcnow().replace(microsecond=0)} - ERROR: {e.__repr__()}")
    else:
        logging.error(
            f"{datetime.datetime.utcnow().replace(microsecond=0)} - Invalid data type! Please use type str for url argument.")


async def fetch_all(urls: List[str]) -> None:
    """
    Asynchronously handles several HTTP requests.
    :param urls: list
    :return: None
    """
    if isinstance(urls, list):
        tasks: List[str] = []
        for item in urls:
            if isinstance(item, str):
                tasks.append(fetch_content(item))
            else:
                logging.error(
                    f"{datetime.datetime.utcnow().replace(microsecond=0)} - Invalid data type! Please use type str inside list 'urls'.")
                continue
        try:
            res = await asyncio.gather(*tasks)
            for r in res:
                print(r)
            logging.info(
                f"{datetime.datetime.utcnow().replace(microsecond=0)} - The application successfully completed!")
        except asyncio.TimeoutError as e:
            logging.error(f"{datetime.datetime.utcnow().replace(microsecond=0)} - ERROR: {e.__repr__()}")
    else:
        logging.error(
            f"{datetime.datetime.utcnow().replace(microsecond=0)} - Invalid data type! Please use type list for urls argument.")


asyncio.run(fetch_all(["https://lms.ithillel.ua/", "https://lms.ithillel.ua/"]))

with open('app.log', "r") as logs:
    for line in logs.readlines():
        print(line)
