import datetime
import asyncio
import random
import time
import logging
from typing import List

logging.basicConfig(filename="app.log", level=logging.INFO)


async def download_page(url: str) -> None:
    """
    Simulates the page downloading and provides the completion time.
    :param url: str
    :return: None
    """
    if isinstance(url, str):
        try:
            delay = [1, 2, 3, 4, 5]
            start = time.time()
            logging.info(f"{datetime.datetime.utcnow().replace(microsecond=0)} - Downloading the URL!")
            await asyncio.sleep(random.choice(delay))
            logging.info(
                f"{datetime.datetime.utcnow().replace(microsecond=0)} - Time for task completion: {time.time() - start:.2f} sec")
        except asyncio.TimeoutError as e:
            logging.error(f"{datetime.datetime.utcnow().replace(microsecond=0)} - ERROR: {e}")
    else:
        logging.error(
            f"{datetime.datetime.utcnow().replace(microsecond=0)} - Invalid data type! Please use type str for 'url' argument.")


async def main(urls: List[str]) -> None:
    """
    Asynchronously downloads pages from a list of URLs concurrently.
    :param urls: list
    :return: None
    """
    if isinstance(urls, list):
        tasks: List[str] = []
        for item in urls:
            if isinstance(item, str):
                tasks.append(download_page(item))
            else:
                logging.error(
                    f"{datetime.datetime.utcnow().replace(microsecond=0)} - Invalid data type! Please use type str for items inside 'urls' list.")
                continue
        try:
            await asyncio.wait_for(asyncio.gather(*tasks), 5)
            logging.info(
                f"{datetime.datetime.utcnow().replace(microsecond=0)} - The application successfully completed!")
        except asyncio.TimeoutError as e:
            logging.error(f"{datetime.datetime.utcnow().replace(microsecond=0)} - ERROR: {e.__repr__()}")
    else:
        logging.error(
            f"{datetime.datetime.utcnow().replace(microsecond=0)} - Invalid data type! Please use type List[str] for 'urls' argument.")


asyncio.run(
    main(["https://www.google.com/", "https://www.google.com/", "https://www.google.com/", "https://www.google.com/"]))

with open("app.log", "r") as logs:
    for line in logs.readlines():
        print(line)
