from colorama import Fore


class ProductWithGetSet:
    """
    The class provides the ability to change the price of the product.
    Methods:
    _______

    get_price()
        Returns the price of the product.
    set_price(new_price: float)
        Sets the new price for the product.
    """

    def __init__(self, name: str, price: float):
        self.name = name
        if price < 0:
            raise ValueError(f"The price may not be less then '0'.")
        else:
            self.price = round(float(price), 2)

    def get_price(self):
        """
        Returns the price of the product.
        :return: float
        """
        return self.price

    def set_price(self, new_price: float):
        """
        Sets the new price for the product.
        :param new_price: float
        """
        if new_price < 0:
            raise ValueError(f"The price may not be less then '0'.")
        else:
            self.price = new_price


class ProductWithProperty:
    """
    The class provides the ability to change the price of the product.
    Methods:
    _______

    price()
        Returns the price of the product.
    price(new_price: float)
        Sets the new price for the product.
    """

    def __init__(self, name: str, price: float):
        self.__name = name
        if price < 0:
            raise ValueError(f"The price may not be less then '0'.")
        else:
            self.__price = round(float(price), 2)

    @property
    def price(self):
        """
        Returns the price of the product.
        :return: float
        """
        return self.__price

    @price.setter
    def price(self, new_price: float):
        """
        Sets the new price for the product.
        :param new_price: float
        """
        if new_price < 0:
            raise ValueError(f"The price may not be less then '0'.")
        else:
            self.__price = new_price


class PriceDescriptor:
    """
    The descriptor checks in the price is greater than '0'.
    Methods:

    __get__(instance, owner)
        Returns the price of the product.
    __set__(instance, value)
        Checks in the price is greater than '0'.
    """

    def __get__(self, instance, owner):
        """
        Returns the price of the product.
        :param instance: object
        :param owner: class
        :return: float
        """
        return instance.__dict__.get("price")

    def __set__(self, instance, value):
        """
        Checks in the price is greater than '0'.
        :param instance: object
        :param value: float
        """
        if value < 0:
            raise ValueError(f"The price may not be less then '0'.")
        else:
            instance.__dict__["price"] = round(value, 2)


class ProductWithDescriptor:
    """
    The class provides the ability to change the price of the product.
    Methods:
    _______

    change_price(new_price: float)
        Sets the new price for the product.
    """
    price = PriceDescriptor()

    def __init__(self, name: str, price: float):
        self.name = name
        self.price = round(float(price), 2)

    def change_price(self, new_price: float):
        """
        Sets the new price for the product.
        :param new_price: float
        """
        self.price = new_price


def test_classes():
    """
    Verifies classes(ProductWithGetSet, ProductWithProperty та ProductWithDescriptor) are working correctly.
    :return: str
    """
    test_price = 4
    negative_test_price = -4
    new_test_price = 5
    product = ProductWithGetSet("test", test_price)
    if product.get_price() != test_price:
        print(Fore.RED + "ProductWithGetSet: The price from get_price does not match the object`s price!")
    else:
        print(Fore.GREEN + "ProductWithGetSet: The price from get_price matches the object`s price!")
    try:
        product = ProductWithGetSet("test", negative_test_price)
    except ValueError:
        print(Fore.GREEN + "ProductWithGetSet: The test with negative price is passed successfully!")
    else:
        print(Fore.RED + "ProductWithGetSet: The test with negative price is failed!")
    product.set_price(5)
    if product.get_price() != new_test_price:
        print(Fore.RED + "ProductWithGetSet: The price from get_price does not match the new object`s price!")
    else:
        print(Fore.GREEN + "ProductWithGetSet: The price from get_price matches the new object`s price!")
    try:
        product.set_price(-5)
    except ValueError:
        print(Fore.GREEN + "ProductWithGetSet: The test with new negative price is passed successfully!")
    else:
        print(Fore.RED + "ProductWithGetSet: The test with new negative price is failed!")
    ##########################
    print()
    product = ProductWithProperty("test", test_price)
    if product.price != test_price:
        print(Fore.RED + "ProductWithProperty: The price from property 'price' does not match the object`s price!")
    else:
        print(Fore.GREEN + "ProductWithProperty: The price from property 'price'  matches the object`s price!")
    try:
        product = ProductWithProperty("test", negative_test_price)
    except ValueError:
        print(Fore.GREEN + "ProductWithProperty: The test with negative price is passed successfully!")
    else:
        print(Fore.RED + "ProductWithProperty: The test with negative price is failed!")
    product.price = 5
    if product.price != new_test_price:
        print(Fore.RED + "ProductWithProperty: The price from property 'price' does not match the new object`s price!")
    else:
        print(Fore.GREEN + "ProductWithProperty: The price from property 'price' matches the new object`s price!")
    try:
        product.price = -5
    except ValueError:
        print(Fore.GREEN + "ProductWithProperty: The test with new negative price is passed successfully!")
    else:
        print(Fore.RED + "ProductWithProperty: The test with new negative price is failed!")
    ##########################
    print()
    product = ProductWithDescriptor("test", test_price)
    if product.price != test_price:
        print(Fore.RED + "ProductWithDescriptor: The price set does not match the object`s price!")
    else:
        print(Fore.GREEN + "ProductWithDescriptor: The price set matches the object`s price!")
    product.change_price(5)
    if product.price != new_test_price:
        print(
            Fore.RED + "ProductWithDescriptor: The price set does not match the new object`s price!")
    else:
        print(Fore.GREEN + "ProductWithDescriptor: The price set matches the new object`s price!")
    try:
        product.change_price(-5)
    except ValueError:
        print(Fore.GREEN + "ProductWithDescriptor: The test with new negative price is passed successfully!")
    else:
        print(Fore.RED + "ProductWithDescriptor: The test with new negative price is failed!")


test_classes()
