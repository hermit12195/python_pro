"""Custom Module for Cassandra testing"""
import uuid
import datetime
from datetime import timedelta
from cassandra.cluster import Cluster
import logging

logging.basicConfig(level=logging.ERROR)
logger = logging.getLogger(__name__)


class ConnectCassandra:
    """
    Performs CRUD operations with Cassandra DB.
    """

    def __init__(self):
        """
        Connects to Cassandra server, creates the KEY SPACE and table 'logs'.
        """
        self.cluster = Cluster(["127.0.0.1"], port=9042)
        self.session = self.cluster.connect()

    def create_keyspace_table(self):
        self.session.execute("""CREATE KEYSPACE IF NOT EXISTS my_keyspace
                WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1}""")
        self.session.execute("USE my_keyspace")
        self.session.execute("""CREATE TABLE IF NOT EXISTS logs
                (event_id UUID, user_id INT, event_type VARCHAR, time_stamp TIMESTAMP, metadata TEXT,
                PRIMARY KEY (event_type, time_stamp, event_id))""")

    def add_log(self, _user_id: int, _event_type: str, _metadata: str) -> None:
        """
        Adds record to the 'logs' table.
        :param _user_id: int
        :param _event_type: str
        :param _metadata: str
        :return: None
        """
        try:
            self.session.execute("""INSERT INTO logs
            (event_id, user_id, event_type, time_stamp, metadata)
            VALUES(%s, %s, %s, %s, %s)""",
                                 (uuid.uuid4(), int(_user_id), str(_event_type),
                                  datetime.datetime.now(datetime.UTC), _metadata))
        except Exception as e:
            logger.exception(f"Error during event handling: {e}")

    def read_log(self, _event_type: str, _hours: int) -> None:
        """
        Prints out the logs within specified time period.
        :param _hours: int
        :return: None
        """
        try:
            rows = self.session.execute("""SELECT * FROM logs WHERE event_type=(%s) AND time_stamp > (%s)""",
                                        (_event_type, datetime.datetime.now(datetime.UTC) - timedelta(hours=_hours)))
            for row in rows:
                print(f"TIME: {row.time_stamp}; USER: {row.user_id}; EVENT: {row.event_type}; METADATA: {row.metadata}")
        except Exception as e:
            logger.exception(f"Error during event handling: {e}")

    def update_event(self, _event_id: str, _event_type: str, _time_stamp: datetime, _metadata: str) -> None:
        """
        Updates metadata field.
        :param _event_type: str
        :param _time_stamp: datetime
        :param _event_id: str
        :param _metadata: str
        :return:
        """
        try:
            _event_id = uuid.UUID(_event_id)
            self.session.execute(
                """UPDATE logs SET metadata=(%s) WHERE event_type=(%s) AND event_id=(%s) AND time_stamp=(%s) """,
                (_metadata, _event_type, _event_id, _time_stamp))
        except Exception as e:
            logger.exception(f"Error during event handling: {e}")

    def remove_events(self, _event_type, _event_id: str, _days: int) -> None:
        """
        Removes the log records within specified time period.
        :param _event_id: str
        :param _days: int
        :return: None
        """
        try:
            _rows = self.session.execute(
                """SELECT event_id, time_stamp FROM logs WHERE event_type = %s AND time_stamp < %s""",
                (_event_type, datetime.datetime.now(datetime.UTC) - timedelta(days=_days)))
            for row in _rows:
                self.session.execute("""
                    DELETE FROM logs WHERE event_type = %s AND time_stamp = %s AND event_id = %s
                """, (_event_type, row.time_stamp, row.event_id))
        except Exception as e:
            logger.exception(f"Error during event handling: {e}")


cass = ConnectCassandra()
cass.create_keyspace_table()
cass.add_log(1, "ssh login2", "ip: 192.168.1.12")
cass.update_event("7e891bf5-3de8-45ed-b691-1d4716a03c34", "ssh login2", datetime.datetime.utcnow(), "TEST")
cass.read_log("ssh login2", 24)
cass.remove_events("ssh login2", "b2babed4-7a29-4473-aa9c-f2360189f56a", 7)
