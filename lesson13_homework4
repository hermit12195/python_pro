"""Custom module for testing Multithreading HTTP server"""
from http.server import BaseHTTPRequestHandler, ThreadingHTTPServer


class GetHandler(BaseHTTPRequestHandler):
    """
    Customizes the do_GET method of class BaseHTTPRequestHandler.
    Methods:
        do_GET: Handles the HTTP GET requests and send the text reply.
    """
    def do_GET(self) -> None:
        """
        Handles the HTTP GET requests and send the text reply.
        :return: None
        """
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"The GET method is successfully processed!")

def run(server=ThreadingHTTPServer, handler=GetHandler) -> None:
    """
    Deploys a simple HTTP Multithreading server.
    :param server: class
    :param handler: class
    :return: None
    """
    httpd = server(("127.0.0.1", 8000), handler)
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        httpd.server_close()

run()
