"""Custom Module for aiohttp tests"""
import aiohttp
import asyncio
import logging

logging.basicConfig(level=logging.ERROR)


async def fetch_content(url: str) -> str:
    """
    Fetches content from URL in text format.
    :param url: str
    :return:
    """
    if isinstance(url, str):
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    print(type(response.text()))
                    return await response.text()
        except aiohttp.ClientConnectionError as e:
            logging.error(f"ERROR: {e}")
    else:
        logging.error("Invalid data type! Please use type str for url argument.")


async def fetch_all(urls: list) -> None:
    """
    Asynchronously handles several HTTP requests.
    :param urls: list
    :return: None
    """
    if isinstance(urls, list):
        try:
            tasks = [fetch_content(url) for url in urls]
            res = await asyncio.gather(*tasks)
            for r in res:
                print(r)
        except asyncio.TimeoutError as e:
            logging.error(f"ERROR: {e}")
    else:
        logging.error("Invalid data type! Please use type list for urls argument.")

asyncio.run(fetch_all(["https://lms.ithillel.ua/", "https://lms.ithillel.ua/"]))
