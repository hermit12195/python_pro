"""Custom Module for asyncio.wait_for tests"""
import datetime
import asyncio
import logging

logging.basicConfig(filename="app.log", level=logging.DEBUG)


async def slow_task() -> None:
    """
    Simulates the slow task.
    :return: None
    """
    try:
        logging.info(f"{datetime.datetime.utcnow().replace(microsecond=0)} - Slow task is started!")
        await asyncio.sleep(10)
    except asyncio.TimeoutError as e:
        logging.error(f"{datetime.datetime.utcnow().replace(microsecond=0)} - ERROR: {e.__repr__()}")


async def main() -> None:
    """
    Waits for the slow task to get completed and throws the TIMEOUT error if it fails to complete in time.
    :return: None
    """
    try:
        await asyncio.wait_for(slow_task(), timeout=5)
        logging.info(f"{datetime.datetime.utcnow().replace(microsecond=0)} - Application was successfully completed!")
    except asyncio.TimeoutError as e:
        logging.error(f"{datetime.datetime.utcnow().replace(microsecond=0)} - ERROR: {e.__repr__()}")


asyncio.run(main())

with open("app.log", "r") as logs:
    for line in logs.readlines():
        print(line)
